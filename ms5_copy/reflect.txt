Aleksandr Valuev            165445198                avaluev@myseneca.ca

In this project, I build a pre-triage program for general hospitals in order to help them to sort the patients. The program sorts the patient according to the need of the Covid test. If a person needs to get tested, he will be assigned to the covid patience. If he is not, then he will be assigned to triage type of patience. Depending on the group, a patient has to enter the data needed for a doctor, such as a name and OHIP number as general information. If a patient in the group of covid patience, then also information about his symptoms. After entering all needed information, patients get the ticket with the expected time of waiting, their number in the line, and the time when it was issued.

In this project, I wrote an abstracted class called IOAble in order to create an interface whose main purpose is to enforce input and output methods for all the derived classes. Two modules are inherited from the IOAble interface: Ticket module and Patient module. The ticket module carries the information about the time and the ticket number. The patient module is derived from the IOAble class is responsible for general patient information and arriving. Both of them overload the parent classâ€™s input and output functions in order to match their own needs.

From the Patient class, we can create different types of patience. In this project, we need only two: the Covid patient and Triage patient. Because they are derived from the same class, their structure is similar, except for a few lines of code that define their differences, such as a patient type, a number in the line. The main program then combines all these modules and implement a file reading and writing/overwriting. It also creates the menu, controls the flow in the waiting line, and defines which group of patience a person belongs to.

Sometimes, it was difficult for me to see how the classes are related. But closer to the finishing, it was clear to me, and I could understand how the structure is working.  I have completed a lot of interesting and diverse workshops that gave me an excellent experience of working with C++. This course taught me a lot. I finally learned the C++ language that I have tried to learn before but fail to do on my own.